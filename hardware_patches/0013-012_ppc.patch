From aea774322f909e3e9d88282607d97584c5b89443 Mon Sep 17 00:00:00 2001
From: Mike Fulton <mikefultonpersonal@gmail.com>
Date: Fri, 17 Jun 2022 11:09:29 -0700
Subject: [PATCH 13/40] 012_ppc

---
 crypto/cryptlib.c                  |  70 ++++++++++++++++++
 crypto/ppc_arch.h                  |  16 ++++-
 crypto/ppccap.c                    |  75 +++++++++----------
 crypto/ppccpuid.pl                 |  10 +++
 crypto/sha/asm/keccak1600-ppc64.pl | 111 ++++++++++++++++-------------
 5 files changed, 196 insertions(+), 86 deletions(-)

diff --git a/crypto/cryptlib.c b/crypto/cryptlib.c
index 0ce8038..906b284 100644
--- a/crypto/cryptlib.c
+++ b/crypto/cryptlib.c
@@ -585,7 +585,77 @@ int OPENSSL_HW_rand(unsigned char *buf)
   }
   return rv;
 }
+#elif defined(__s390__)
+#include "s390x_arch.h"
+extern void s390x_trng(void *buff,size_t len);
+ 
+int OPENSSL_HW_rand(unsigned char *buf)
+{
+  if(OPENSSL_s390xcap_P[18] & S390X_PRNO_TRNG) {
+    if(NULL != buf) {
+      s390x_trng((void *)buf,8);
+    }  
+    return 8;
+  }   
+  return 0;
+}
+#elif defined(__MVS__)
+#include <builtins.h>
+#include <stdio.h>
+
+unsigned long OPENSSL_rdtsc()
+{
+  unsigned long long val;
+  __stck1(&val);
+  return val;
+}
+
+#elif defined(__ppc__) || defined(__powerpc__) || defined(_AIX)
+#include "ppc_arch.h"
+extern uint64_t OPENSSL_HW_rand_raw(void);
+extern unsigned int OPENSSL_ppccap_P;
+
+int OPENSSL_HW_rand(unsigned char *buf)
+{
+  union {
+    uint64_t tmp;    
+    uint32_t tmpx[2];
+  } u;
+  uint32_t tmp1 = 0;  
+  int i = 10;
+  int rv = 4;
+  if( 0 != (OPENSSL_ppccap_P & PPC_MADD300)) {
+    if(NULL != buf) {
+      for(i = 0 ; i < 10; i++) {
+        u.tmp = OPENSSL_HW_rand_raw();
+        /*      printf("(%0lx %0x, %0x, %d)\n",u.tmp,u.tmpx[0],u.tmpx[1],i);*/
+#if defined(__BIG_ENDIAN__)
+        if(0 == u.tmpx[0]) {
+          break;
+        }
+#else
+        if(0 == u.tmpx[1]) {
+          break;
+        }  
+#endif  
+      }
+      if(10 == i) {
+        u.tmp = 0;
+        rv = 0;
+      }
+#if defined(__BIG_ENDIAN__)
+      tmp1 = u.tmpx[1];
+#else
+      tmp1 = u.tmpx[0];
+#endif      
 
+      memcpy(&buf[0],&tmp1,4);
+    }
+  } else {
+    rv = 0;
+  }
+  return rv;
+}
 
 #else
 int OPENSSL_HW_rand(unsigned char *buf)
diff --git a/crypto/ppc_arch.h b/crypto/ppc_arch.h
index a49d23a..e761f01 100644
--- a/crypto/ppc_arch.h
+++ b/crypto/ppc_arch.h
@@ -17,6 +17,21 @@ extern unsigned int OPENSSL_ppccap_P;
 #ifndef _AUXV_HWCAP_H
 #define _AUXV_HWCAP_H
 
+/*
+ * Flags' usage can appear ambiguous, because they are set rather
+ * to reflect OpenSSL performance preferences than actual processor
+ * capabilities.
+ */
+# define PPC_FPU64       (1<<0)
+/*HPARMREGS is Unused now */
+# define PPC_HPARMREGS   (1<<1) 
+# define PPC_ALTIVEC     (1<<2)
+# define PPC_CRYPTO207   (1<<3)
+# define PPC_FPU         (1<<4)
+# define PPC_MADD300     (1<<5)
+# define PPC_VCIPHER    PPC_CRYPTO207
+
+
 #ifdef __powerpc__
 
 #ifndef AT_HWCAP2
@@ -105,7 +120,6 @@ extern unsigned long query_auxv(unsigned int type);
 
 #if defined(__linux)
 #include <endian.h>
-#include "auxv.h"
 #endif /* __linux */
 
 /*
diff --git a/crypto/ppccap.c b/crypto/ppccap.c
index 9d69a46..21660c8 100644
--- a/crypto/ppccap.c
+++ b/crypto/ppccap.c
@@ -22,6 +22,9 @@
 #  define __power_set(a) (_system_configuration.implementation & (a))
 # endif
 #endif
+
+
+
 #if defined(__APPLE__) && defined(__MACH__)
 # include <sys/types.h>
 # include <sys/sysctl.h>
@@ -206,11 +209,16 @@ size_t OPENSSL_instrument_bus2(unsigned int *out, size_t cnt, size_t max)
     else
         return 0;
 }
-
+/* getauxval is almost USELESS here. 
+   It's an OS facility so it only knows about hardware capabilities
+   that predate the OS. Which means it the build machine would need to 
+   be current
+   Drop this code and fall through to the "ouch that hurts" paths
+*/
 #if defined(__GLIBC__) && defined(__GLIBC_PREREQ)
 # if __GLIBC_PREREQ(2, 16)
 #  include <sys/auxv.h>
-#  define OSSL_IMPLEMENT_GETAUXVAL
+/* #  define OSSL_IMPLEMENT_GETAUXVAL */
 # elif defined(__ANDROID_API__)
 /* see https://developer.android.google.cn/ndk/guides/cpu-features */
 #  if __ANDROID_API__ >= 18
@@ -333,6 +341,7 @@ void OPENSSL_cpuid_setup(void)
 
         return;
     }
+    mask |= PPC_MADD300;
 #endif
 
 #ifdef OSSL_IMPLEMENT_GETAUXVAL
@@ -433,9 +442,9 @@ void OPENSSL_cpuid_setup(void)
 }
 
 /* Bits you can turn OFF */
-#define PPC_ALLOWED_MASK_BITS (PPC_CRYPTO207 | PPC_ALTIVEC | PPC_FPU64)
+#define PPC_ALLOWED_MASK_BITS (PPC_CRYPTO207 | PPC_ALTIVEC | PPC_FPU64 | PPC_MADD300)
 /* Bits you can turn ON */
-#define PPC_PERMITTED_MASK_BITS (PPC_CRYPTO207 | PPC_ALTIVEC | PPC_FPU64)
+#define PPC_PERMITTED_MASK_BITS 0
 
 /* This is the default path, but with ICC we allow 
    override via ICC_CAP_MASK
@@ -445,63 +454,55 @@ void OPENSSL_cpuid_setup(void)
    so it's not enabled by default on variants with the 2.06 ISA
    flagged.
 */
-int OPENSSL_cpuid(long long *id);
+int OPENSSL_cpuid(unsigned long long *id);
 
-int OPENSSL_cpuid_override(long long mask) 
+int OPENSSL_cpuid_override(unsigned long long mask) 
 {
   union {
-    long long cap;
-    unsigned int icap[4];
+    unsigned long long cap;
+    unsigned int icap[sizeof(unsigned long long)/sizeof(unsigned int)];
   } u;
+  int l = sizeof(unsigned long long)/sizeof(unsigned int);
   unsigned long long tmask;
-  int retest = 1;
-
   u.cap = 0;
-  tmask = mask;
-
-  OPENSSL_cpuid(&u.cap);
-  if(tmask & PPC_PERMITTED_MASK_BITS) {
-    tmask &= PPC_PERMITTED_MASK_BITS;
-    u.cap |= tmask;
-  }
-  tmask = mask | (~PPC_ALLOWED_MASK_BITS);
-  u.cap &= tmask;
 
+#if (__BYTE_ORDER == __LITTLE_ENDIAN)
+  u.icap[0] = OPENSSL_ppccap_P;
+#else
+  u.icap[l-1] = OPENSSL_ppccap_P;
+#endif 
 
+  tmask = mask & (~PPC_ALLOWED_MASK_BITS);
+
+  u.cap &= tmask;
+  
 #if (__BYTE_ORDER == __LITTLE_ENDIAN)
   OPENSSL_ppccap_P = u.icap[0];
 #else
-  OPENSSL_ppccap_P = u.icap[3];
+  OPENSSL_ppccap_P = u.icap[l-1];
 #endif   
-  if(retest) {
-    /* And probe if we turned stuff on, to ensure we don't have accidents 
-       if the function is really there, no SIGILL, no problem
-       if it wasn't , at least we TRY to catch the SIGILL here, we
-       won't later
-     */
-    OPENSSL_cpuid_setup();
-  }
+  /* fprintf(stderr,"Cpuid override cap %0llx mask %0llx, tmask %0llx ppccap_P %0x\n",u.cap,mask,tmask,OPENSSL_ppccap_P);*/
   return 1;
 }
 
-int OPENSSL_cpuid(long long *id)
+int OPENSSL_cpuid(unsigned long long *id)
 {
   union {
     unsigned long long cap;
-    unsigned int icap[3];
+    unsigned int icap[sizeof(unsigned long long)/sizeof(unsigned int)];
   } u;
-  unsigned long long cap = 0;
+  int l = sizeof(unsigned long long)/sizeof(unsigned int);
+  u.cap = 0;
   OPENSSL_cpuid_setup();
+
 #if (__BYTE_ORDER == __LITTLE_ENDIAN)
   u.icap[0] = OPENSSL_ppccap_P;
-  u.icap[1] = u.icap[2] = u.icap[3] = 0;
 #else
-  u.icap[0] = u.icap[1] = u.icap[2] = 0;
-  u.icap[3] = OPENSSL_ppccap_P;
+  u.icap[l-1] = OPENSSL_ppccap_P;
 #endif  
-  cap = OPENSSL_ppccap_P;
 
-  /* fprintf(stderr,"cpuid %08lx %08lx %08lx %016llx\n",OPENSSL_ppccap_P,u.icap[0],u.icap[3],cap);  */
-  *id = cap;
+  /* fprintf(stderr,"cpuid %0x %0x %0x %0llx\n",OPENSSL_ppccap_P,u.icap[0],u.icap[l-1],u.cap);*/
+  *id = u.cap;
   return 1;
 }
+
diff --git a/crypto/ppccpuid.pl b/crypto/ppccpuid.pl
index 2065cbb..f30f8a2 100755
--- a/crypto/ppccpuid.pl
+++ b/crypto/ppccpuid.pl
@@ -124,6 +124,16 @@ Ladd:	lwarx	r5,0,r3
 	.long	0
 .size	.OPENSSL_atomic_add,.-.OPENSSL_atomic_add
 
+.globl .OPENSSL_HW_rand_raw
+.align 4
+.OPENSSL_HW_rand_raw:
+Ldarn: darn    r3,0
+       blr 
+       .long   0
+       .byte   0,12,0x14,0,0,0,2,0
+       .long   0
+.size  .OPENSSL_HW_rand_raw,.-.OPENSSL_HW_rand_raw
+
 .globl	.OPENSSL_rdtsc_mftb
 .align	4
 .OPENSSL_rdtsc_mftb:
diff --git a/crypto/sha/asm/keccak1600-ppc64.pl b/crypto/sha/asm/keccak1600-ppc64.pl
index 11b6329..6b4d7e5 100755
--- a/crypto/sha/asm/keccak1600-ppc64.pl
+++ b/crypto/sha/asm/keccak1600-ppc64.pl
@@ -1,7 +1,7 @@
 #!/usr/bin/env perl
 # Copyright 2017-2020 The OpenSSL Project Authors. All Rights Reserved.
 #
-# Licensed under the OpenSSL license (the "License").  You may not use
+# Licensed under the Apache License 2.0 (the "License").  You may not use
 # this file except in compliance with the License.  You can obtain a copy
 # in the file LICENSE in the source distribution or at
 # https://www.openssl.org/source/license.html
@@ -27,10 +27,10 @@
 #
 #		r=1088(*)
 #
-# PPC970/G5	14.6/+120%
-# POWER7	10.3/+100%
-# POWER8	11.5/+85%
-# POWER9	9.4/+45%
+# PPC970/G5	14.0/+130%
+# POWER7	9.7/+110%
+# POWER8	10.6/+100%
+# POWER9	8.2/+66%
 #
 # (*)	Corresponds to SHA3-256. Percentage after slash is improvement
 #	over gcc-4.x-generated KECCAK_1X_ALT code. Newer compilers do
@@ -48,6 +48,16 @@ if ($flavour =~ /64/) {
 	$PUSH	="std";
 } else { die "nonsense $flavour"; }
 
+$LITTLE_ENDIAN = ($flavour=~/le$/) ? 1 : 0;
+
+if ($LITTLE_ENDIAN) {
+	$DWORD_LE_LOAD = "ldu	r0,8(r3)";
+	$LE_LOAD_SIZE = "8";
+} else {
+	$DWORD_LE_LOAD = "bl	dword_le_load";
+	$LE_LOAD_SIZE = "1";
+}
+
 $0 =~ m/(.*[\/\\])[^\/\\]+$/; $dir=$1;
 ( $xlate="${dir}ppc-xlate.pl" and -f $xlate ) or
 ( $xlate="${dir}../../perlasm/ppc-xlate.pl" and -f $xlate) or
@@ -380,23 +390,25 @@ KeccakF1600:
 	.byte	0,12,4,1,0x80,18,1,0
 	.long	0
 .size	KeccakF1600,.-KeccakF1600
-
+___
+if (!$LITTLE_ENDIAN) {
+$code.=<<___;
 .type	dword_le_load,\@function
 .align	5
 dword_le_load:
-	lbzu	r0,1(r3)
-	lbzu	r4,1(r3)
-	lbzu	r5,1(r3)
+	lbz	r0,1(r3)
+	lbz	r4,2(r3)
+	lbz	r5,3(r3)
 	insrdi	r0,r4,8,48
-	lbzu	r4,1(r3)
+	lbz	r4,4(r3)
 	insrdi	r0,r5,8,40
-	lbzu	r5,1(r3)
+	lbz	r5,5(r3)
 	insrdi	r0,r4,8,32
-	lbzu	r4,1(r3)
+	lbz	r4,6(r3)
 	insrdi	r0,r5,8,24
-	lbzu	r5,1(r3)
+	lbz	r5,7(r3)
 	insrdi	r0,r4,8,16
-	lbzu	r4,1(r3)
+	lbzu	r4,8(r3)
 	insrdi	r0,r5,8,8
 	insrdi	r0,r4,8,0
 	blr
@@ -404,7 +416,10 @@ dword_le_load:
 	.byte	0,12,0x14,0,0,0,1,0
 	.long	0
 .size	dword_le_load,.-dword_le_load
+___
+}
 
+$code.=<<___;
 .globl	SHA3_absorb
 .type	SHA3_absorb,\@function
 .align	5
@@ -432,7 +447,7 @@ SHA3_absorb:
 	$PUSH	r0,`$FRAME+$LRSAVE`($sp)
 
 	bl	PICmeup
-	subi	r4,r4,1				; prepare for lbzu
+	subi	r4,r4,$LE_LOAD_SIZE		; prepare for ldu or lbzu
 	subi	r12,r12,8			; prepare for ldu
 
 	$PUSH	r3,`$LOCALS+0*$SIZE_T`($sp)	; save A[][]
@@ -483,79 +498,79 @@ SHA3_absorb:
 	srwi	r5,r5,3
 	$PUSH	r4,`$LOCALS+2*$SIZE_T`($sp)	; save len
 	mtctr	r5
-	bl	dword_le_load			; *inp++
+	$DWORD_LE_LOAD				; *inp++
 	xor	$A[0][0],$A[0][0],r0
 	bdz	.Lprocess_block
-	bl	dword_le_load			; *inp++
+	$DWORD_LE_LOAD				; *inp++
 	xor	$A[0][1],$A[0][1],r0
 	bdz	.Lprocess_block
-	bl	dword_le_load			; *inp++
+	$DWORD_LE_LOAD				; *inp++
 	xor	$A[0][2],$A[0][2],r0
 	bdz	.Lprocess_block
-	bl	dword_le_load			; *inp++
+	$DWORD_LE_LOAD				; *inp++
 	xor	$A[0][3],$A[0][3],r0
 	bdz	.Lprocess_block
-	bl	dword_le_load			; *inp++
+	$DWORD_LE_LOAD				; *inp++
 	xor	$A[0][4],$A[0][4],r0
 	bdz	.Lprocess_block
-	bl	dword_le_load			; *inp++
+	$DWORD_LE_LOAD				; *inp++
 	xor	$A[1][0],$A[1][0],r0
 	bdz	.Lprocess_block
-	bl	dword_le_load			; *inp++
+	$DWORD_LE_LOAD				; *inp++
 	xor	$A[1][1],$A[1][1],r0
 	bdz	.Lprocess_block
-	bl	dword_le_load			; *inp++
+	$DWORD_LE_LOAD				; *inp++
 	xor	$A[1][2],$A[1][2],r0
 	bdz	.Lprocess_block
-	bl	dword_le_load			; *inp++
+	$DWORD_LE_LOAD				; *inp++
 	xor	$A[1][3],$A[1][3],r0
 	bdz	.Lprocess_block
-	bl	dword_le_load			; *inp++
+	$DWORD_LE_LOAD				; *inp++
 	xor	$A[1][4],$A[1][4],r0
 	bdz	.Lprocess_block
-	bl	dword_le_load			; *inp++
+	$DWORD_LE_LOAD				; *inp++
 	xor	$A[2][0],$A[2][0],r0
 	bdz	.Lprocess_block
-	bl	dword_le_load			; *inp++
+	$DWORD_LE_LOAD				; *inp++
 	xor	$A[2][1],$A[2][1],r0
 	bdz	.Lprocess_block
-	bl	dword_le_load			; *inp++
+	$DWORD_LE_LOAD				; *inp++
 	xor	$A[2][2],$A[2][2],r0
 	bdz	.Lprocess_block
-	bl	dword_le_load			; *inp++
+	$DWORD_LE_LOAD				; *inp++
 	xor	$A[2][3],$A[2][3],r0
 	bdz	.Lprocess_block
-	bl	dword_le_load			; *inp++
+	$DWORD_LE_LOAD				; *inp++
 	xor	$A[2][4],$A[2][4],r0
 	bdz	.Lprocess_block
-	bl	dword_le_load			; *inp++
+	$DWORD_LE_LOAD				; *inp++
 	xor	$A[3][0],$A[3][0],r0
 	bdz	.Lprocess_block
-	bl	dword_le_load			; *inp++
+	$DWORD_LE_LOAD				; *inp++
 	xor	$A[3][1],$A[3][1],r0
 	bdz	.Lprocess_block
-	bl	dword_le_load			; *inp++
+	$DWORD_LE_LOAD				; *inp++
 	xor	$A[3][2],$A[3][2],r0
 	bdz	.Lprocess_block
-	bl	dword_le_load			; *inp++
+	$DWORD_LE_LOAD				; *inp++
 	xor	$A[3][3],$A[3][3],r0
 	bdz	.Lprocess_block
-	bl	dword_le_load			; *inp++
+	$DWORD_LE_LOAD				; *inp++
 	xor	$A[3][4],$A[3][4],r0
 	bdz	.Lprocess_block
-	bl	dword_le_load			; *inp++
+	$DWORD_LE_LOAD				; *inp++
 	xor	$A[4][0],$A[4][0],r0
 	bdz	.Lprocess_block
-	bl	dword_le_load			; *inp++
+	$DWORD_LE_LOAD				; *inp++
 	xor	$A[4][1],$A[4][1],r0
 	bdz	.Lprocess_block
-	bl	dword_le_load			; *inp++
+	$DWORD_LE_LOAD				; *inp++
 	xor	$A[4][2],$A[4][2],r0
 	bdz	.Lprocess_block
-	bl	dword_le_load			; *inp++
+	$DWORD_LE_LOAD				; *inp++
 	xor	$A[4][3],$A[4][3],r0
 	bdz	.Lprocess_block
-	bl	dword_le_load			; *inp++
+	$DWORD_LE_LOAD				; *inp++
 	xor	$A[4][4],$A[4][4],r0
 
 .Lprocess_block:
@@ -657,21 +672,21 @@ SHA3_squeeze:
 	${UCMP}i $len,8
 	blt	.Lsqueeze_tail
 
-	stbu	r0,1($out)
+	stb	r0,1($out)
 	srdi	r0,r0,8
-	stbu	r0,1($out)
+	stb	r0,2($out)
 	srdi	r0,r0,8
-	stbu	r0,1($out)
+	stb	r0,3($out)
 	srdi	r0,r0,8
-	stbu	r0,1($out)
+	stb	r0,4($out)
 	srdi	r0,r0,8
-	stbu	r0,1($out)
+	stb	r0,5($out)
 	srdi	r0,r0,8
-	stbu	r0,1($out)
+	stb	r0,6($out)
 	srdi	r0,r0,8
-	stbu	r0,1($out)
+	stb	r0,7($out)
 	srdi	r0,r0,8
-	stbu	r0,1($out)
+	stbu	r0,8($out)
 
 	subic.	$len,$len,8
 	beq	.Lsqueeze_done
-- 
2.36.1

