diff --git a/crypto/armcap.c b/crypto/armcap.c
index e129613..fae74ff 100644
--- a/crypto/armcap.c
+++ b/crypto/armcap.c
@@ -24,7 +24,7 @@ void OPENSSL_cpuid_setup(void)
 {
 }
 
-uint32_t OPENSSL_rdtsc(void)
+unsigned long OPENSSL_rdtsc(void)
 {
     return 0;
 }
@@ -51,7 +51,7 @@ void _armv8_sha512_probe(void);
 # endif
 uint32_t _armv7_tick(void);
 
-uint32_t OPENSSL_rdtsc(void)
+unsigned long OPENSSL_rdtsc(void)
 {
     if (OPENSSL_armcap_P & ARMV7_TICK)
         return _armv7_tick();
diff --git a/crypto/cryptlib.c b/crypto/cryptlib.c
index 02f98e9..78c7775 100644
--- a/crypto/cryptlib.c
+++ b/crypto/cryptlib.c
@@ -598,7 +598,7 @@ extern void s390x_trng(void *buff,size_t len);
 
 int OPENSSL_HW_rand(unsigned char *buf)
 {
-  if(OPENSSL_s390xcap_P[18] & S390X_PRNO_TRNG) {
+  if(S390X_CAPBIT(S390X_TRNG)) {
     if(NULL != buf) {
       s390x_trng((void *)buf,8);
     }
diff --git a/crypto/rand/rand_unix.c b/crypto/rand/rand_unix.c
index 0f45251..9b82a5c 100644
--- a/crypto/rand/rand_unix.c
+++ b/crypto/rand/rand_unix.c
@@ -187,8 +187,12 @@ size_t rand_pool_acquire_entropy(RAND_POOL *pool)
 #  endif
 
         /* Get wall clock time, take 8 bits. */
+#if defined(__sun)
+        v = (gethrtime() & 0xFF);
+#else
         clock_gettime(CLOCK_REALTIME, &ts);
         v = (unsigned char)(ts.tv_nsec & 0xFF);
+#endif
         rand_pool_add(pool, arg, &v, sizeof(v) , 2);
     }
     return rand_pool_entropy_available(pool);
@@ -806,7 +810,7 @@ int rand_pool_add_additional_data(RAND_POOL *pool)
  */
 static uint64_t get_time_stamp(void)
 {
-# if defined(OSSL_POSIX_TIMER_OKAY)
+# if defined(OSSL_POSIX_TIMER_OKAY) && !defined(__sun)
     {
         struct timespec ts;
 
diff --git a/crypto/s390xcap.c b/crypto/s390xcap.c
index 65ce3cd..213aebb 100644
--- a/crypto/s390xcap.c
+++ b/crypto/s390xcap.c
@@ -76,6 +76,7 @@ int OPENSSL_cpuid(long long *id);
 
 int OPENSSL_cpuid_override(long long mask)
 {
+#if 0
   union {
     long long cap;
     unsigned int icap[2];
@@ -86,10 +87,12 @@ int OPENSSL_cpuid_override(long long mask)
   u.cap &= mask;
   OPENSSL_s390xcap_P[0] = u.icap[0];
   OPENSSL_s390xcap_P[1] = u.icap[1];
-  return 1;
+#endif
+  return 0;
 }
 int OPENSSL_cpuid(long long *id)
 {
+#if 0
   union {
     long long cap;
     unsigned int icap[2];
@@ -102,5 +105,6 @@ int OPENSSL_cpuid(long long *id)
   u.icap[0] = OPENSSL_s390xcap_P[0];
   u.icap[1] = OPENSSL_s390xcap_P[1];
   *id = u.cap;
-  return 1;
+#endif
+  return 0;
 }
diff --git a/crypto/s390xcpuid.pl b/crypto/s390xcpuid.pl
index 5cbb962..a16247d 100755
--- a/crypto/s390xcpuid.pl
+++ b/crypto/s390xcpuid.pl
@@ -411,7 +411,37 @@ s390x_kma:
 ___
 }
 
+
 $code.=<<___;
+.globl s390x_trng
+.type  s390x_trng,\@function
+.align 16
+s390x_trng:
+       lghi    %r5,0
+       lghi    %r0,114         # prno capability vector checked by caller
+       .long   0xb93c0042      # prno %r4,%r2
+       brc     1,.-4           # pay attention to "partial completion"
+       br      %r14
+.size  s390x_trng,.-s390x_trng
+
+
+.globl s390x_drng
+.type  s390x_drng,\@function
+.align 16
+s390x_drng:
+#if !defined(__s390x__) && !defined(__s390x)
+       l       %r1,96(%r15)
+#else
+       lg      %r1,160(%r15)
+#endif
+       lr      %r0,%r6         # prno capability vector checked by caller
+       .long   0xb93c0024      # prno %r2,%r4
+       brc     1,.-4           # pay attention to "partial completion"
+       br      %r14
+.size  s390x_drng,.-s390x_drng
+
+
+
 .section	.init
 	brasl	$ra,OPENSSL_cpuid_setup
 ___
diff --git a/crypto/sm2/sm2_sign.c b/crypto/sm2/sm2_sign.c
index 683f03f..c909bf6 100644
--- a/crypto/sm2/sm2_sign.c
+++ b/crypto/sm2/sm2_sign.c
@@ -18,6 +18,9 @@
 #include <openssl/err.h>
 #include <openssl/bn.h>
 #include <string.h>
+#if defined(_WIN32) && !defined(UINT16_MAX)
+#define UINT16_MAX       0xffffui16
+#endif
 
 int sm2_compute_z_digest(uint8_t *out,
                          const EVP_MD *digest,
diff --git a/crypto/sparcv9cap.c b/crypto/sparcv9cap.c
index 5d7c28a..df943a7 100644
--- a/crypto/sparcv9cap.c
+++ b/crypto/sparcv9cap.c
@@ -100,7 +100,7 @@ unsigned long _sparcv9_random(void);
 size_t _sparcv9_vis1_instrument_bus(unsigned int *, size_t);
 size_t _sparcv9_vis1_instrument_bus2(unsigned int *, size_t, size_t);
 
-uint32_t OPENSSL_rdtsc(void)
+unsigned long OPENSSL_rdtsc(void)
 {
     if (OPENSSL_sparcv9cap_P[0] & SPARCV9_TICK_PRIVILEGED)
 #if defined(__sun) && defined(__SVR4)
