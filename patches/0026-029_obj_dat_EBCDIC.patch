From 71abd051f8054319ca83e7af4be567fe8076fca0 Mon Sep 17 00:00:00 2001
From: Mike Fulton <mikefultonpersonal@gmail.com>
Date: Fri, 17 Jun 2022 11:09:31 -0700
Subject: [PATCH 26/40] 029_obj_dat_EBCDIC

---
 crypto/objects/obj_dat.c | 60 ++++++++++++++++++++++++++++++++++++++--
 1 file changed, 57 insertions(+), 3 deletions(-)

diff --git a/crypto/objects/obj_dat.c b/crypto/objects/obj_dat.c
index 7e8de72..ba4f409 100644
--- a/crypto/objects/obj_dat.c
+++ b/crypto/objects/obj_dat.c
@@ -537,6 +537,43 @@ int OBJ_txt2nid(const char *s)
     ASN1_OBJECT_free(obj);
     return nid;
 }
+/* #define CHARSET_EBCDIC
+    Set CHARSET_EBCDIC for testing this hack on an ascii system.
+*/
+#ifdef CHARSET_EBCDIC
+/* A lot of bad choices here. The tables searched are created by a perl program run out of the build and the artifacts
+    are checked in, that leaves EBCDIC systems (of which to fair there aren't many) swinging in the breeze as
+    the sorting for the later binary sort was done in ascii, the search in EBCDIC
+
+   The best option would be appear to be trade some memory for performance, i.e. the first time it's referenced
+   copy the ascii sorted array to a new array, sort that in EBCDIC then continue on with the binary search.
+   
+   Great in theory but all the abstraction makes life difficult.
+
+   And note: We can get away with this in IBM code because it's first run during POST and POST is run
+   during library load and there's no threading at that point.
+
+   pthread_once() is another option. 
+*/
+static unsigned int ln_objs_EBCDIC[NUM_LN];
+static int ln_objs_sorted = 0;
+static unsigned int sn_objs_EBCDIC[NUM_SN];
+static int sn_objs_sorted = 0;
+
+static int EBCDIC_ln_sort(const void *ain, const void *bin)
+{
+    unsigned int *a = (unsigned int *)ain;
+    unsigned int *b = (unsigned int *)bin;
+    return strcmp(nid_objs[*a].ln,nid_objs[*b].ln);
+}
+
+static int EBCDIC_sn_sort(const void *ain, const void *bin)
+{
+    unsigned int *a = (unsigned int *)ain;
+    unsigned int *b = (unsigned int *)bin;
+    return strcmp(nid_objs[*a].sn,nid_objs[*b].sn);
+}
+#endif
 
 int OBJ_ln2nid(const char *s)
 {
@@ -553,7 +590,16 @@ int OBJ_ln2nid(const char *s)
         if (adp != NULL)
             return adp->obj->nid;
     }
+#if defined(CHARSET_EBCDIC)
+    if(0 == ln_objs_sorted) {
+        memcpy(ln_objs_EBCDIC,ln_objs,(NUM_LN * sizeof(unsigned int)));
+        qsort(ln_objs_EBCDIC,NUM_LN,sizeof(unsigned int),EBCDIC_ln_sort);
+        ln_objs_sorted = 1;
+    }
+    op = OBJ_bsearch_ln(&oo,ln_objs_EBCDIC,NUM_LN);
+#else
     op = OBJ_bsearch_ln(&oo, ln_objs, NUM_LN);
+#endif
     if (op == NULL)
         return NID_undef;
     return nid_objs[*op].nid;
@@ -574,7 +620,16 @@ int OBJ_sn2nid(const char *s)
         if (adp != NULL)
             return adp->obj->nid;
     }
+#if defined(CHARSET_EBCDIC)
+    if(0 == sn_objs_sorted) {
+        memcpy(sn_objs_EBCDIC,sn_objs,(NUM_SN * sizeof(unsigned int)));
+        qsort(sn_objs_EBCDIC,NUM_SN,sizeof(unsigned int),EBCDIC_sn_sort);
+        sn_objs_sorted = 1;
+    }
+    op = OBJ_bsearch_sn(&oo,sn_objs_EBCDIC,NUM_SN);
+#else    
     op = OBJ_bsearch_sn(&oo, sn_objs, NUM_SN);
+#endif    
     if (op == NULL)
         return NID_undef;
     return nid_objs[*op].nid;
@@ -584,8 +639,7 @@ const void *OBJ_bsearch_(const void *key, const void *base, int num, int size,
                          int (*cmp) (const void *, const void *))
 {
     return OBJ_bsearch_ex_(key, base, num, size, cmp, 0);
-}
-
+}    
 const void *OBJ_bsearch_ex_(const void *key, const void *base_, int num,
                             int size,
                             int (*cmp) (const void *, const void *),
@@ -610,7 +664,7 @@ const void *OBJ_bsearch_ex_(const void *key, const void *base_, int num,
         else
             break;
     }
-#ifdef CHARSET_EBCDIC
+#if 0 /* #ifdef CHARSET_EBCDIC */
     /*
      * THIS IS A KLUDGE - Because the *_obj is sorted in ASCII order, and I
      * don't have perl (yet), we revert to a *LINEAR* search when the object
-- 
2.36.1

