diff --git a/crypto/rsa/rsa_gen.c b/crypto/rsa/rsa_gen.c
index 29056a6..526f06c 100644
--- a/crypto/rsa/rsa_gen.c
+++ b/crypto/rsa/rsa_gen.c
@@ -22,6 +22,9 @@
 static int rsa_builtin_keygen(RSA *rsa, int bits, int primes, BIGNUM *e_value,
                               BN_GENCB *cb);
 
+int fips_rsa_builtin_keygen(RSA *rsa, int bits, BIGNUM *e_value,
+                                   BN_GENCB *cb);
+
 /*
  * NB: this wrapper would normally be placed in rsa_lib.c and the static
  * implementation would probably be in rsa_eay.c. Nonetheless, is kept here
@@ -33,7 +36,6 @@ int RSA_generate_key_ex(RSA *rsa, int bits, BIGNUM *e_value, BN_GENCB *cb)
 {
     if (rsa->meth->rsa_keygen != NULL)
         return rsa->meth->rsa_keygen(rsa, bits, e_value, cb);
-
     return RSA_generate_multi_prime_key(rsa, bits, RSA_DEFAULT_PRIME_NUM,
                                         e_value, cb);
 }
@@ -41,6 +43,9 @@ int RSA_generate_key_ex(RSA *rsa, int bits, BIGNUM *e_value, BN_GENCB *cb)
 int RSA_generate_multi_prime_key(RSA *rsa, int bits, int primes,
                                  BIGNUM *e_value, BN_GENCB *cb)
 {
+    if(primes == RSA_DEFAULT_PRIME_NUM) {
+        return fips_rsa_builtin_keygen(rsa,bits,e_value,cb);
+    }
     /* multi-prime is only supported with the builtin key generation */
     if (rsa->meth->rsa_multi_prime_keygen != NULL) {
         return rsa->meth->rsa_multi_prime_keygen(rsa, bits, primes,
@@ -391,3 +396,270 @@ static int rsa_builtin_keygen(RSA *rsa, int bits, int primes, BIGNUM *e_value,
     BN_CTX_free(ctx);
     return ok;
 }
+/* Derived from OpenSSL's FIPS code but not identical 
+    in particular the final key pair/encrypt decrypt test is done elsewhere
+*/
+int fips_rsa_builtin_keygen(RSA *rsa, int bits, BIGNUM *e_value,
+                                   BN_GENCB *cb)
+{
+    BIGNUM *r0 = NULL, *r1 = NULL, *r2 = NULL, *r3 = NULL, *tmp;
+    BN_CTX *ctx = NULL;
+    int ok = -1;
+    int i;
+    int n = 0;
+    int test = 0;
+    int pbits = bits / 2;
+    unsigned long error = 0;
+
+    /*  For ICC we'll allow a shorter key than 2k but the upper level code will flag this as not FIPS compliant 
+        Oh, and OpenSSL there's also an UPPER bound
+     */
+    if ( bits < 512) { 
+        FIPSerr(RSA_F_RSA_BUILTIN_KEYGEN, RSA_R_KEY_SIZE_TOO_SMALL);
+        return 0;
+    }
+    if ((pbits & 0xFF) != 0) {
+        FIPSerr(RSA_F_RSA_BUILTIN_KEYGEN, RSA_R_KEY_SIZE_TOO_SMALL);
+        return 0;
+    }
+
+    ctx = BN_CTX_new();
+    if (ctx == NULL)
+        goto err;
+    BN_CTX_start(ctx);
+    r0 = BN_CTX_get(ctx);
+    r1 = BN_CTX_get(ctx);
+    r2 = BN_CTX_get(ctx);
+    r3 = BN_CTX_get(ctx);
+
+    if (r3 == NULL)
+        goto err;
+
+    /* We need the RSA components non-NULL */
+    if (!rsa->n && ((rsa->n = BN_new()) == NULL))
+        goto err;
+    if (!rsa->d && ((rsa->d = BN_secure_new()) == NULL))
+        goto err;
+    if (!rsa->e && ((rsa->e = BN_new()) == NULL))
+        goto err;
+    if (!rsa->p && ((rsa->p = BN_secure_new()) == NULL))
+        goto err;
+    if (!rsa->q && ((rsa->q = BN_secure_new()) == NULL))
+        goto err;
+    if (!rsa->dmp1 && ((rsa->dmp1 = BN_secure_new()) == NULL))
+        goto err;
+    if (!rsa->dmq1 && ((rsa->dmq1 = BN_secure_new()) == NULL))
+        goto err;
+    if (!rsa->iqmp && ((rsa->iqmp = BN_secure_new()) == NULL))
+        goto err;
+
+    if (!BN_set_word(r0, RSA_F4))
+        goto err;
+    if (BN_cmp(e_value, r0) < 0 || BN_num_bits(e_value) > 256) {
+        ok = 0;                 /* we set our own err */
+        RSAerr(RSA_F_RSA_BUILTIN_KEYGEN,ERR_LIB_BN);
+        goto err;
+    }
+
+    /* prepare approximate minimum p and q */
+    if (!BN_set_word(r0, 0xB504F334))
+        goto err;
+    if (!BN_lshift(r0, r0, pbits - 32))
+        goto err;
+
+    /* prepare minimum p and q difference */
+    if (!BN_one(r3))
+        goto err;
+    if (!BN_lshift(r3, r3, pbits - 100))
+        goto err;
+
+    BN_copy(rsa->e, e_value);
+
+    if (!BN_is_zero(rsa->p) && !BN_is_zero(rsa->q))
+        test = 1;
+
+    BN_set_flags(r0, BN_FLG_CONSTTIME);
+    BN_set_flags(r1, BN_FLG_CONSTTIME);
+    BN_set_flags(r2, BN_FLG_CONSTTIME);
+    BN_set_flags(rsa->p, BN_FLG_CONSTTIME);
+    BN_set_flags(rsa->q, BN_FLG_CONSTTIME);
+
+ retry:
+    /* generate p and q */
+    for (i = 0; i < 5 * pbits; i++) {
+ ploop:
+        if (!test)
+            if (!BN_rand(rsa->p, pbits, 0, 1))
+                goto err;
+        if (BN_cmp(rsa->p, r0) < 0) {
+            if (test)
+                goto err;
+            goto ploop;
+        }
+
+        if (!BN_sub(r2, rsa->p, BN_value_one()))
+            goto err;
+        ERR_set_mark();
+        if (BN_mod_inverse(r1, r2, rsa->e, ctx) != NULL) {
+            /* GCD == 1 since inverse exists */
+            int r;
+            r = BN_is_prime_fasttest_ex(rsa->p, pbits > 1024 ? 4 : 5, ctx, 0,
+                                        cb);
+            if (r == -1 || (test && r <= 0))
+                goto err;
+            if (r > 0)
+                break;
+        } else {
+            error = ERR_peek_last_error();
+            if (ERR_GET_LIB(error) == ERR_LIB_BN
+                && ERR_GET_REASON(error) == BN_R_NO_INVERSE) {
+                /* GCD != 1 */
+                ERR_pop_to_mark();
+            } else {
+                goto err;
+            }
+        }
+        if (!BN_GENCB_call(cb, 2, n++))
+            goto err;
+    }
+
+    if (!BN_GENCB_call(cb, 3, 0))
+        goto err;
+
+    if (i >= 5 * pbits)
+        /* prime not found */
+        goto err;
+
+    for (i = 0; i < 5 * pbits; i++) {
+ qloop:
+        if (!test)
+            if (!BN_rand(rsa->q, pbits, 0, 1))
+                goto err;
+        if (BN_cmp(rsa->q, r0) < 0) {
+            if (test)
+                goto err;
+            goto qloop;
+        }
+        if (!BN_sub(r2, rsa->q, rsa->p))
+            goto err;
+        if (BN_ucmp(r2, r3) <= 0) {
+            if (test)
+                goto err;
+            goto qloop;
+        }
+
+        if (!BN_sub(r2, rsa->q, BN_value_one()))
+            goto err;
+        ERR_set_mark();
+        if (BN_mod_inverse(r1, r2, rsa->e, ctx) != NULL) {
+            /* GCD == 1 since inverse exists */
+            int r;
+            r = BN_is_prime_fasttest_ex(rsa->q, pbits > 1024 ? 4 : 5, ctx, 0,
+                                        cb);
+            if (r == -1 || (test && r <= 0))
+                goto err;
+            if (r > 0)
+                break;
+        } else {
+            error = ERR_peek_last_error();
+            if (ERR_GET_LIB(error) == ERR_LIB_BN
+                && ERR_GET_REASON(error) == BN_R_NO_INVERSE) {
+                /* GCD != 1 */
+                ERR_pop_to_mark();
+            } else {
+                goto err;
+            }
+        }
+        if (!BN_GENCB_call(cb, 2, n++))
+            goto err;
+    }
+
+    if (!BN_GENCB_call(cb, 3, 1))
+        goto err;
+
+    if (i >= 5 * pbits)
+        /* prime not found */
+        goto err;
+
+    if (test) {
+        /* do not try to calculate the remaining key values */
+        BN_clear(rsa->n);
+        ok = 1;
+        goto err;
+    }
+
+    if (BN_cmp(rsa->p, rsa->q) < 0) {
+        tmp = rsa->p;
+        rsa->p = rsa->q;
+        rsa->q = tmp;
+    }
+
+    /* calculate n */
+    if (!BN_mul(rsa->n, rsa->p, rsa->q, ctx))
+        goto err;
+
+    /* calculate d */
+    if (!BN_sub(r1, rsa->p, BN_value_one()))
+        goto err;               /* p-1 */
+    if (!BN_sub(r2, rsa->q, BN_value_one()))
+        goto err;               /* q-1 */
+
+    /* note that computing gcd is not safe to timing attacks */
+    if (!BN_gcd(r0, r1, r2, ctx))
+        goto err;
+
+    {
+        if (!BN_div(r0, NULL, r1, r0, ctx))
+            goto err;
+
+        if (!BN_mul(r0, r0, r2, ctx)) /* lcm(p-1, q-1) */
+            goto err;
+
+        if (!BN_mod_inverse(rsa->d, rsa->e, r0, ctx)) /* d */
+            goto err;
+    }
+
+    if (BN_num_bits(rsa->d) < pbits)
+        goto retry;             /* d is too small */
+
+    {
+        BIGNUM *d = BN_new();
+
+        if (d == NULL)
+            goto err;
+        BN_with_flags(d, rsa->d, BN_FLG_CONSTTIME);
+
+        if (/* calculate d mod (p-1) */
+            !BN_mod(rsa->dmp1, d, r1, ctx)
+            /* calculate d mod (q-1) */
+            || !BN_mod(rsa->dmq1, d, r2, ctx)) {
+            BN_free(d);
+            goto err;
+        }
+        /* We MUST free d before any further use of rsa->d */
+        BN_free(d);
+    }
+
+    /* calculate inverse of q mod p */
+    if (!BN_mod_inverse(rsa->iqmp, rsa->q, rsa->p, ctx))
+        goto err;
+
+    /* The final key check is done in icclib.c rather than here
+        We handle FIPS errors differently from OpenSSL
+    */
+
+    ok = 1;
+ err:
+    if (ok == -1) {
+        RSAerr(RSA_F_RSA_BUILTIN_KEYGEN, ERR_LIB_BN);
+        ok = 0;
+    }
+    if (ctx != NULL) {
+        BN_CTX_end(ctx);
+        BN_CTX_free(ctx);
+    }
+
+    return ok;
+}
+
+
